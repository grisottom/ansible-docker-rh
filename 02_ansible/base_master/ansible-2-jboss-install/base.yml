---
- hosts: master, slaves

  vars_files:
    - vars/main.yml

  environment: "{{ proxy_env }}"  #proxy for openjdk download

  vars: 
    user_home_dir_jboss: "/home/{{ jboss_os_user }}"
    force_install: false #override as needed

    app_dir_JBOSS: "{{ user_home_dir_jboss }}/jboss_eap"
    tmp_extract_dir_JBOSS: "{{ user_home_dir_jboss }}/tmp/extract_dir_jboss"
    app_archive_JBOSS: "http://serve.local:8000/jboss/downloads/jboss-eap-7.4.tar.gz"

    app_dir_MODULES: "{{ user_home_dir_jboss }}/jboss_eap/modules"
    tmp_extract_dir_MODULES: "{{ user_home_dir_jboss }}/tmp/extract_dir_modules"
    app_archive_MODULES: "http://serve.local:8000/jboss/module-pg/modules.tar.gz"

    is_remote_archive: true

    # Option to avoid overwriting
    # add_rsync_opts: 
    #   - "--update"
    #   - "--delay-updates"
      
  roles:
    - role: geerlingguy.java
      when: "ansible_os_family == 'RedHat'"
      java_packages:
        - java-11-openjdk

  tasks:
    - block:  
      # list of 'os_users' in ./vars/main.yml
      - name: Create user "{{ jboss_os_user }}"
        import_role:
          name: create-users
        become: true
        no_log: true  #in order to hide sensitive vars, ex password

      # rsync will be used to copy files, role install-app-extracted
      # dependency for next step
      - name: install the latest version of rsync
        yum:
          name: rsync
          state: latest
        become: true    

      # check if installation {{app_dir}} already exists
      # https://phoenixnap.com/kb/ansible-check-if-file-exists#ftoc-heading-2
      - name: :'{{app_dir_JBOSS}}' already exists
        stat: 
          path={{ app_dir_JBOSS }}
        become: true
        become_user: "{{ jboss_os_user }}"
        register: jboss_target_dir
        no_log: true
          
      # - name: RESULT - check if 'app_dir_JBOSS':'{{app_dir_JBOSS}}' already exists
      #   debug:
      #     msg: "Exists? : {{ jboss_target_dir.stat.exists }}"
      #   when: not jboss_target_dir.stat.exists or force_install|bool

      # run as user (sudo -u user command)
      # only when jboss_target_dir DOS NOT EXISTS or force_install
      - name: install Jboss
        import_role:
          name: install-app-extracted
        vars:
          app_dir: "{{ app_dir_JBOSS }}"
          extract_dir: "{{ tmp_extract_dir_JBOSS }}"
          app_archive: "{{ app_archive_JBOSS }}"
        become: true  
        become_user: "{{ jboss_os_user }}"
        when: not jboss_target_dir.stat.exists or force_install|bool
        no_log: true

      - name: check if 'app_dir_MODULES':'{{app_dir_MODULES}}' already exists
        stat: 
          path={{ app_dir_MODULES }}
        become: true
        become_user: "{{ jboss_os_user }}"
        register: jboss_modules_target_dir
        no_log: true

      # install jboss modules
      # only when jboss_modules_target_dir DOS NOT EXISTS or force_install    
      - name: install modules, from 'app_dir_MODULES':'{{ app_dir_MODULES }}'
        import_role:
          name: install-app-extracted
        vars:
          app_dir: "{{ app_dir_MODULES }}"
          extract_dir: "{{ tmp_extract_dir_MODULES }}"
          app_archive: "{{ app_archive_MODULES }}"
        become: true
        become_user: "{{ jboss_os_user }}"
        when: not jboss_modules_target_dir.stat.exists or force_install|bool
        no_log: true

      # add 'app_dir/bin' to PATH
      - name: Add { app_dir }}/bin to system-wide $PATH.
        copy:
          dest: /etc/profile.d/jboss-bin-path.sh
          content: 'export PATH=$PATH:{{ app_dir_JBOSS }}/bin'
        become: true

      - name: Add { app_dir }} as JBOSS_HOME environment variable
        copy:
          dest: /etc/profile.d/jboss-home.sh
          content: 'export JBOSS_HOME={{ app_dir_JBOSS }}'
        become: true

      # -------------------------------------
      rescue:  #config master
      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"
