---
- hosts: master, slaves

  vars_files:
    - vars/main.yml

  vars: 
    jboss_mgmt_user: jboss
    jboss_mgmt_pwd: jboss00
    jboss_mgmt_secret: "{{ jboss_mgmt_pwd | b64encode}}" #

    jboss_app_user: user
    jboss_app_pwd : user00

    OS_user_name_JBOSS: jboss  #Operating System username 

    #[ 29/02/2024 15:11:27 ][ jboss on v121d502 ][ /u01/app/jboss/jboss ]
    # [ 29/02/2024 15:12:13 ][ jboss on v121d502 ][ /u01/app/jboss ]
    # DEV-INSS-CENTRAL-SERVICE MASTER> ls
    # jboss  
    # jboss-eap-7.3

    user_home_dir_jboss: "/home/{{ OS_user_name_JBOSS }}"
    app_dir_JBOSS: "{{ user_home_dir_jboss }}/jboss_eap"    
    config_domain_dir_JBOSS: "{{ app_dir_JBOSS }}/domain/configuration"

    JBOSS_PROFILE_FROM: "default"
    JBOSS_PROFILE_TO: "A_profile"
    JBOSS_SERVER_GROUP: "server_group_A"
    JBOSS_SERVER_CONFIG: "A_config"

    # create a variable named "shell_env" that is a dictionary
    shell_env:
      PATH: "{{ lookup('ansible.builtin.env','PATH') }}:{{ app_dir_JBOSS }}/bin"
      JBOSS_HOME: "{{ app_dir_JBOSS }}"
      HOST_CONFIG: "{{ host_config }}"  #from group_vars
      JBOSS_OPTION: "{{ jboss_option }}" #from group_vars


  tasks:

    - block:  #pre-config  (copy config files to master and slaves)
      #--------------------------------------------
      - name: show all the hosts matching the pattern 'master'
        ansible.builtin.debug:
          msg: "{{ item }}"
        with_inventory_hostnames:
          - master

      - name: get 'master' hostname from inventory, put in variable 'master_hostname'
        ansible.builtin.set_fact:
          master_hostname: "{{ item }}"
        with_inventory_hostnames:
          - master

      - name: show variable 'master_hostname'
        ansible.builtin.debug:
          msg: "{{ master_hostname }}"

      #--------------------------------------------
      - name: print shell_env, 
        debug: 
          msg: shell_env={{ shell_env }}

      #--------------------------------------------
      - name: template 'host-CONFIG-master-j2.xml',
        when: inventory_hostname in groups["master"]
        ansible.builtin.template:
          src: ./template/{{ item.src }}
          dest: "{{ config_domain_dir_JBOSS }}/{{ item.dest }}"
          mode: 0775
        with_items:
          - {src: 'host-CONFIG-master-j2.xml', dest: 'host-CONFIG-master.xml'}

      #--------------------------------------------
      - name: template 'host-CONFIG-slave-j2.xml',
        when: inventory_hostname in groups["slaves"]
        ansible.builtin.template:
          src: ./template/{{ item.src }}
          dest: "{{ config_domain_dir_JBOSS }}/{{ item.dest }}"
          mode: 0775
        with_items:
          - {src: 'host-CONFIG-slave-j2.xml', dest: 'host-CONFIG-slave.xml'}

      #---------------------------------------------
      - name: Copy/Transfer CONFIG and START scripts to 'master' and 'slaves'
        ansible.builtin.copy: 
          src: ./scripts/       
          dest: /home/jboss/scripts/
          mode: 0775

      # end of block, same user for all tasks
      become: true
      become_user: "{{ OS_user_name_JBOSS }}"

    - block:  # 1) config & 2) start jboss
              # jboss is started in order to config (add-user), process dies
              # jboss is restarted before cli-config, process keeps running (nohup)
      #---------------------------------------------
      - name: execute INI CONFIG script on 'master'
        when: inventory_hostname in groups["master"]
        ansible.builtin.shell:
        args:
          chdir: /home/jboss/scripts/ini-config/
          cmd: ./jboss-ini-config.sh 
        register: results
        #ignore_errors: true  # in order to continue processing
        no_log: true         # log in next task

      - name: Show result with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

      #---------------------------------------------
      - name: execute START script on 'master'
        when: inventory_hostname in groups["master"]
        ansible.builtin.shell:
        args:
          chdir: /home/jboss/scripts/start/
          cmd: nohup ./jboss-start.sh 
        register: results
        #ignore_errors: true  
        no_log: true

      - name: Show result with line breaks
        when: inventory_hostname in groups["master"]
        ansible.builtin.debug:
          var: results.stdout_lines

      #---------------------------------------------
      - name: execute INI CONFIG script on 'slaves'
        when: inventory_hostname in groups["slaves"]
        ansible.builtin.shell:
        args:
          chdir: /home/jboss/scripts/ini-config/
          cmd: ./jboss-ini-config.sh 
        register: results
        #ignore_errors: true  # in order to continue processing
        no_log: true         # log in rescue block

      - name: Show result with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

      #---------------------------------------------
      - name: execute START script on 'slaves'
        when: inventory_hostname in groups["slaves"]
        ansible.builtin.shell:
        args:
          chdir: /home/jboss/scripts/start/
          cmd: nohup ./jboss-start.sh 
          #nohup = 'no hung up', Keep shell running after end of task
        # environment: "{{ shell_env }}"
        register: results
        #ignore_errors: true  
        no_log: true

      - name: Show result with line breaks
        when: inventory_hostname in groups["slaves"]
        ansible.builtin.debug:
          var: results.stdout_lines

      #---------------------------------------------
      - name: Show result with line breaks
        when: inventory_hostname in groups["master"]    
        ansible.builtin.debug:
          var: results.stdout_lines

      # end of block, for all tasks
      environment:
        - "{{ shell_env }}"   #variables PATH, JBOSS_HOME, HOST_CONFIG, JBOSS_OPTION
      become: true
      become_user: "{{ OS_user_name_JBOSS }}"

      rescue:  #config & start
      - name: RESCUE - Show result with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

    - block:  #CLI config on 'master' form 'master'
      #---------------------------------------------      
      - name: execute CLI CONFIG script on 'master' for 'master'
        ansible.builtin.shell:
        when: inventory_hostname in groups["master"]
        args:
          chdir: /home/jboss/scripts/cli-config-master/
          cmd: ./jboss-cli-config.sh {{ JBOSS_PROFILE_TO }} {{ JBOSS_PROFILE_FROM }} {{ JBOSS_SERVER_GROUP }}
        register: cli
        ignore_errors: true  # in order to continue processing
        no_log: true

      - name: Show result with line breaks
        when: 
          - inventory_hostname in groups["master"]         
        ansible.builtin.debug:
          var: "cli.stdout_lines"

      - name: Fail in case of error
        when: 
          - inventory_hostname in groups["master"]         
          - cli.failed
        ansible.builtin.fail:
          msg: 'Script failure'
        no_log: true
                   
      # end of block, for all tasks
      environment:
        - "{{ shell_env }}"
      become: true
      become_user: "{{ OS_user_name_JBOSS }}"

    - block:  #CLI config on 'master' for 'slaves'
      #---------------------------------------------      
      - name: execute CLI CONFIG script on 'master' for 'slaves'
        ansible.builtin.shell:
        when: inventory_hostname in groups["master"]
        args:
          chdir: /home/jboss/scripts/cli-config-slaves/
          cmd: ./jboss-cli-config.sh {{ item }} {{ JBOSS_SERVER_GROUP }} {{ JBOSS_SERVER_CONFIG }}
        loop: "{{ groups['slaves'] }}"
        register: cli
        ignore_errors: true  # in order to continue processing
        no_log: true

      - name: Show result with line breaks
        when: 
          - inventory_hostname in groups["master"]         
        ansible.builtin.debug:
          var: "{{ item }}"
        loop: "{{ cli.results }}"

      - name: Fail in case of error
        when: 
          - inventory_hostname in groups["master"]         
          - item.failed
        ansible.builtin.fail:
          msg: '{{ item }}'
        loop: "{{ cli.results }}"  
        no_log: true
                   
      # end of block, for all tasks
      environment:
        - "{{ shell_env }}"
      become: true
      become_user: "{{ OS_user_name_JBOSS }}"

