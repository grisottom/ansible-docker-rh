---
- hosts: master, slaves

  vars_files:
    - vars/main.yml

  any_errors_fatal: true

  vars: 
    # jboss_mgmt_user: jboss
    # jboss_mgmt_pwd: jboss00
    # jboss_mgmt_secret: "{{ jboss_mgmt_pwd | b64encode}}" #

    # jboss_app_user: user
    # jboss_app_pwd : user00

    # jboss_os_user: jboss  #Operating System username 

    user_home_dir_jboss: "/home/{{ jboss_os_user }}"
    app_dir_JBOSS: "{{ user_home_dir_jboss }}/jboss_eap"
    config_domain_dir_JBOSS: "{{ app_dir_JBOSS }}/domain/configuration"

    config_scripts_dir: "{{ user_home_dir_jboss }}/scripts"

    JBOSS_PROFILE_FROM: "default"
    JBOSS_PROFILE_TO: "A_profile"
    JBOSS_SERVER_GROUP: "server_group_A"
    JBOSS_SERVER_CONFIG: "A_config"

    # create a variable named "shell_env" that is a dictionary
    shell_env:
      PATH: "{{ lookup('ansible.builtin.env','PATH') }}:{{ app_dir_JBOSS }}/bin"
      JBOSS_HOME: "{{ app_dir_JBOSS }}"
      HOST_CONFIG: "{{ host_config }}"  #from group_vars
      JBOSS_OPTION: "{{ jboss_option }}" #from group_vars

  tasks:

    #--------------------------------------------
    - block:  #pre-config  (copy config files to master and slaves)
      # - name: show all the hosts matching the pattern 'master'
      #   ansible.builtin.debug:
      #     msg: "{{ item }}"
      #   with_inventory_hostnames:
      #     - master

      - name: get 'master' hostname from inventory, put in variable 'master_hostname'
        ansible.builtin.set_fact:
          master_hostname: "{{ item }}"
        with_inventory_hostnames:
          - master

      - name: show variable 'master_hostname'
        ansible.builtin.debug:
          msg: "{{ master_hostname }}"

      #------
      - name: print shell_env, 
        debug: 
          msg: shell_env={{ shell_env }}

      #------
      - name: template 'host-CONFIG-master-j2.xml' to 'host-CONFIG-master.xml' in 'master'
        when: inventory_hostname in groups["master"]
        ansible.builtin.template:
          src: ./template/{{ item.src }}
          dest: "{{ config_domain_dir_JBOSS }}/{{ item.dest }}"
          mode: 0775
        with_items:
          - {src: 'host-CONFIG-master-j2.xml', dest: 'host-CONFIG-master.xml'}

      #------
      - name: template 'host-CONFIG-slave-j2.xml' to 'host-CONFIG-slave.xml' in 'slaves'
        when: inventory_hostname in groups["slaves"]
        ansible.builtin.template:
          src: ./template/{{ item.src }}
          dest: "{{ config_domain_dir_JBOSS }}/{{ item.dest }}"
          mode: 0775
        with_items:
          - {src: 'host-CONFIG-slave-j2.xml', dest: 'host-CONFIG-slave.xml'}

      #------
      - name: Copy/Transfer CONFIG and START scripts to 'master' and 'slaves'
        ansible.builtin.copy: 
          src: ./scripts/       
          dest: "{{ config_scripts_dir }}"
          mode: 0775


      # end of block, same user for all tasks
      become: true
      become_user: "{{ jboss_os_user }}"

      rescue:  #config & start
      - name: Show result with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

      - name: Abort execution
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"

    #---------------------------------------------
    - name: ini config in master
      when: inventory_hostname in groups["master"]
      block:
      - name: execute INI CONFIG script in 'master'
        ansible.builtin.shell:
        args:
          chdir: "{{ config_scripts_dir }}/ini-config/"
          cmd: ./jboss-ini-config-master.sh {{ jboss_mgmt_user }} {{ jboss_mgmt_user_pwd }}
        register: results
        no_log: false         # log in next task

      - name: Show sucessful result of previous task with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

      rescue:  #config master
      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"

    #---------------------------------------------
    - name: ini config in slaves
      when: inventory_hostname in groups["slaves"]
      block:

      - name: execute INI CONFIG script in 'slaves'
        ansible.builtin.shell:
        args:
          chdir: "{{ config_scripts_dir }}/ini-config/"
          cmd: ./jboss-ini-config-slave.sh {{ jboss_app_user }} {{ jboss_app_user_pwd }};
        register: results
        #ignore_errors: true  # in order to continue processing
        no_log: true         # log in rescue block

      - name: Show sucessful result of previous task with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

      rescue:  #config
      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"

    #---------------------------------------------
    - name: start master
      when: inventory_hostname in groups["master"]
      block:

      - name: execute START script in 'master'
        ansible.builtin.shell:
        #when: inventory_hostname in groups["master"]        
        args:
          chdir: "{{ config_scripts_dir }}/start/"
          cmd: nohup ./jboss-start.sh 
        register: results
        no_log: true

      - name: Show sucessful result of previous task with line breaks
        ansible.builtin.debug:
          var: results.stdout_lines

      rescue:  #config
      - name: Show error results with line breaks 
        ansible.builtin.debug:
          var: ansible_failed_result.stdout_lines

      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result.failed }}"

      # end of block, for all tasks
      environment:
        - "{{ shell_env }}"
      become: true
      become_user: "{{ jboss_os_user }}"

    #---------------------------------------------      
    - name: start slaves
      when: inventory_hostname in groups["slaves"]
      block:

      - name: execute START script in 'slaves'
        ansible.builtin.shell:
        args:
          chdir: "{{ config_scripts_dir }}/start/"
          cmd: nohup ./jboss-start.sh 
          #nohup = 'no hung up', Keep shell running after end of task
        register: results
        #ignore_errors: true  
        no_log: true

      - name: Show sucessful result of previous task with line breaks
        when: inventory_hostname in groups["master"]    
        ansible.builtin.debug:
          var: results.stdout_lines

      rescue:  #config
      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"

      # environment, for block
      environment:
        - "{{ shell_env }}"   #variables PATH, JBOSS_HOME, HOST_CONFIG, JBOSS_OPTION
      become: true
      become_user: "{{ jboss_os_user }}"

    #---------------------------------------------      
    - block:  #CLI config in 'master' for 'master'

      - name: template 'cli-CONFIG-master-j2.properties' to 'cli-CONFIG-master.properties' in 'master'
        when: inventory_hostname in groups["master"]
        ansible.builtin.template:
          src: ./template/{{ item.src }}
          dest: "{{ config_scripts_dir }}/cli-config-master/{{ item.dest }}"
          mode: 0775
        with_items:
          - {src: 'cli-CONFIG-master-j2.properties', dest: 'cli-CONFIG-master.properties'}

      - name: execute CLI CONFIG script in 'master' for 'master'
        ansible.builtin.shell:
        when: inventory_hostname in groups["master"]
        args:
          chdir: "{{ config_scripts_dir }}/cli-config-master/"
          cmd: ./jboss-cli-master-config.sh
        register: cli
        ignore_errors: true  # in order to continue processing
        no_log: true

      # - name: Show result of previous task with line breaks
      #   when: 
      #     - inventory_hostname in groups["master"]         
      #   ansible.builtin.debug:
      #     var: "cli.stdout_lines"

      - name: Fail in case of error
        when: 
          - inventory_hostname in groups["master"]         
          - cli.failed
        ansible.builtin.fail:
          msg: 'Script failure'
        no_log: true
                   
      rescue:  #config & start
      - name: Show result with line breaks
        ansible.builtin.debug:
          #var: results.stdout_lines
          var: "{{ item }}"
        loop: "{{ cli.results }}"          

      - name: Abort execution
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"

      always: #delete file cli-CONFIG-master.properties, contains sentitive data
      - name: Delete file cli-CONFIG-master.properties
        ansible.builtin.file:
          path: "{{ config_scripts_dir }}/cli-config-master/cli-CONFIG-master.properties"
          state: absent

      # end of block, for all tasks
      environment:
        - "{{ shell_env }}"
      become: true
      become_user: "{{ jboss_os_user }}"

    #---------------------------------------------      
    - block:  #CLI config in 'master' for 'slaves'

      - name: execute CLI CONFIG script in 'master' for 'slaves'
        ansible.builtin.shell:
        when: inventory_hostname in groups["master"]
        args:
          chdir: "{{ config_scripts_dir }}/cli-config-slaves/"
          cmd: ./jboss-slave-cli-config.sh {{ item }} {{ JBOSS_SERVER_GROUP }} {{ JBOSS_SERVER_CONFIG }} {{ pg_db_data_source }}
        loop: "{{ groups['slaves'] }}"
        register: cli
        ignore_errors: true  # in order to continue processing
        no_log: true

      # - name: Show result of previous task with line breaks
      #   when: 
      #     - inventory_hostname in groups["master"]         
      #   ansible.builtin.debug:
      #     var: "{{ item }}"
      #   loop: "{{ cli.results }}"

      - name: Fail in case of error
        when: 
          - inventory_hostname in groups["master"]         
          - item.failed
        ansible.builtin.fail:
          msg: '{{ item }}'
        loop: "{{ cli.results }}"  
        no_log: true
                   
      rescue:  #config & start
      - name: Show result with line breaks
        ansible.builtin.debug:
          var: "{{ item }}"
        loop: "{{ cli.results }}"
        #  var: results.stdout_lines

      - name: Abort execution
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result.msg }}"

      # end of block, for all tasks
      environment:
        - "{{ shell_env }}"
      become: true
      become_user: "{{ jboss_os_user }}"      


