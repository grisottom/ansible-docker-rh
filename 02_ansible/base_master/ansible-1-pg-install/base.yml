#refs: 
# https://rischmann.fr/blog/setting-up-postgresql-with-ansible
# https://stribny.name/blog/ansible-postgresql/

#pg chosen version: 13

---
- hosts: pg_host

  vars_files:
    - vars/main.yml

  environment: "{{ proxy_env }}"  #proxy for download openjdk

  pre_tasks:
    - name: "Install packages"
      ansible.builtin.dnf: "name={{ item }} state=present"
      with_items:
        - postgresql13-server
        - postgresql13-contrib
        - python3-psycopg2
      become: true
      notify:
        - Enable postgres service

  tasks:
    #-----------------------------------------------
    - name: Config and start block
      block:
      #------ initialize with postgres exclusively, without 'become' (root)
      - name: Intialize PostgreSQL
        ansible.builtin.command:
          chdir: /usr/pgsql-13/bin/
          cmd: postgresql-13-setup initdb
          creates: /var/lib/pgsql/13/data/PG_VERSION
        become_user: postgres

      #------ 
      - name: Enable/start postgres service
        ansible.builtin.systemd_service:
          name: postgresql-13
          state: reloaded
          enabled: true
        become: true

      - name: chown, change owner of '/usr/pgsql/bin' to 'postgres'
        ansible.builtin.file:
          path: /usr/pgsql-13/bin/
          owner: postgres
          group: postgres
          mode: u=rwX,g=rX,o=rX
          recurse: yes
        become: true

      #------ 
      - name: Set options
        community.postgresql.postgresql_set:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
        #become_user: postgres
        with_items: "{{ postgresql_options }}"
        notify:
          - Restart postgresql        
      #------ 
      - name: Create the databases
        community.postgresql.postgresql_db:
          name: "{{ item }}"
          encoding: "UTF-8"
        #become_user: postgres
        with_items: "{{ postgresql_databases }}"
      #------ 
      - name: Create the users
        community.postgresql.postgresql_user:
          db: "{{ item.db }}"
          name: "{{ item.name }}"
          password: "{{ item.password | default(omit) }}"
        #become_user: postgres
        environment:
          PGOPTIONS: "-c password_encryption=scram-sha-256"
        with_items: "{{ postgresql_users }}"
        no_log: true  #in order to hide sensitive vars, ex password
      #------ 
      - name: Create the schemas
        community.postgresql.postgresql_schema:
          db: "{{ item.db }}"
          name: "{{ item.name }}"
          owner: "{{ item.name }}"
        #become_user: postgres
        with_items: "{{ postgresql_schemas }}"
      #------ 
      #This is enough for the users 'user0' and 'user1' to have complete control of the db1 and db2 databases respectively
      - name: Set the user privileges
        community.postgresql.postgresql_privs:
          database: "{{ item.db }}"
          state: present
          objs: "{{ item.objs | default(omit) }}"
          privs: "{{ item.privs }}"
          type: "{{ item.type | default(omit) }}"
          roles: "{{ item.roles | default(omit) }}"
        #become_user: postgres
        with_items: "{{ postgresql_privs | default([]) }}"      
      #------
      - name: Add entries to pg_hba
        community.postgresql.postgresql_pg_hba:
          dest: "/var/lib/pgsql/13/data/pg_hba.conf"
          address: "{{ item.address | default(omit) }}"
          contype: "{{ item.contype }}"
          databases: "{{ item.databases }}"
          method: "{{ item.method }}"
          users: "{{ item.users }}"
        become_user: postgres
        with_items: "{{ postgresql_hba_entries }}"

      - name: pg restart
        ansible.builtin.command:
          chdir: /usr/pgsql-13/bin/
          cmd: ./pg_ctl restart
        become: true
        become_user: postgres
        become_flags: "-i"

      #------ 
      rescue:  #recue for config and start
      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"             