#refs: 
# https://rischmann.fr/blog/setting-up-postgresql-with-ansible
# https://stribny.name/blog/ansible-postgresql/

#pg chosen version: 13

---
- hosts: pg_host

  vars_files:
    - vars/main.yml

  environment: "{{ proxy_env }}"  #proxy for download openjdk

  handlers:
    #------ pg restart 
    - name: pg restart
      ansible.builtin.command:
        chdir: /usr/pgsql-13/bin/
        cmd: ./pg_ctl restart
      become: true
      become_user: postgres
      become_flags: "-i"

  pre_tasks:
    #-------
    # needed rpms, not available in Red Hat repos
    - name: Pre install alternative postgres dependency RPMs, only for RHEL8
      ansible.builtin.command:
        cmd: "dnf install {{item}} -y"
      with_items:
        # needed for alternative postgres RPM, only RHEL8
        - https://ftp.unicamp.br/pub/rocky/8/BaseOS/x86_64/os/Packages/l/libicu-60.3-2.el8_1.x86_64.rpm
        - https://ftp.unicamp.br/pub/rocky/8/BaseOS/x86_64/os/Packages/p/perl-Data-Dumper-2.167-399.el8.x86_64.rpm
      when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution_major_version'] == "8" and postgresql_rpms_from_alternative
    #-------
    - name: Install alternative postgres RPM
      ansible.builtin.command:
        cmd: "dnf install {{item}} -y"
      with_items:
        # alternative:
        - https://ftp.unicamp.br/pub/postgresql/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
      when: postgresql_rpms_from_alternative        
    #-------
    - name: Install official postgres RPM
      ansible.builtin.command:
        cmd: "dnf install {{item}} -y"
      with_items:
        # oficial:
        - https://download.postgresql.org/pub/repos/yum/reporpms/EL-8-x86_64/pgdg-redhat-repo-latest.noarch.rpm
      when: not postgresql_rpms_from_alternative
    #-------
    - name: "Install packages"
      ansible.builtin.dnf: "name={{ item }} state=present"
      with_items:
        - postgresql13-server
        - postgresql13-contrib
        - python3-psycopg2
      become: true

  tasks:
    #-----------------------------------------------
    - name: Config and start block
      block:
      #------ initialize with postgres exclusively, without 'become' (root)
      - name: Intialize PostgreSQL
        ansible.builtin.command:
          chdir: /usr/pgsql-13/bin/
          cmd: postgresql-13-setup initdb
          creates: /var/lib/pgsql/13/data/PG_VERSION
        become_user: postgres

      - name: chown, change owner of '/usr/pgsql/bin' to 'postgres'
        ansible.builtin.file:
          path: /usr/pgsql-13/bin/
          owner: postgres
          group: postgres
          mode: u=rwX,g=rX,o=rX
          recurse: yes
        become: true

      #------ Enable service, for restart, start/restart controled by pg_ctl here
      - name: Enable postgres service
        ansible.builtin.systemd_service:
          name: postgresql-13
          enabled: true
          daemon-reexec: true
        become: true

      #------ Get postgres process status
      - name: pg status
        ansible.builtin.command:
          chdir: /usr/pgsql-13/bin/
          cmd: ./pg_ctl status
        become: true
        become_user: postgres
        become_flags: "-i"
        register: results
        ignore_errors: true
        no_log: true

      #------ Debug postgres status when not running
      - name: debug pg status
        ansible.builtin.debug:
          var: results
        when: "'pg_ctl: server is running' not in results.stdout"

      #------ pg start when not running
      - name: pg start
        ansible.builtin.command:
          chdir: /usr/pgsql-13/bin/
          cmd: ./pg_ctl start
        become: true
        become_user: postgres
        become_flags: "-i"
        when: "'pg_ctl: server is running' not in results.stdout"

      #------ 
      - name: Set options
        community.postgresql.postgresql_set:
          name: "{{ item.name }}"
          value: "{{ item.value }}"
        become: true          
        become_user: postgres
        with_items: "{{ postgresql_options }}"
        notify:
          - pg restart

      #------ 
      - name: Create the databases
        community.postgresql.postgresql_db:
          name: "{{ item }}"
          encoding: "UTF-8"
        become: true          
        become_user: postgres
        with_items: "{{ postgresql_databases }}"
      #------ 
      - name: Create the users
        community.postgresql.postgresql_user:
          db: "{{ item.db }}"
          name: "{{ item.name }}"
          password: "{{ item.password | default(omit) }}"
        become: true
        become_user: postgres
        environment:
          PGOPTIONS: "-c password_encryption=scram-sha-256"
        with_items: "{{ postgresql_users }}"
        no_log: true  #in order to hide sensitive vars, ex password
      #------ 
      - name: Create the schemas
        community.postgresql.postgresql_schema:
          db: "{{ item.db }}"
          name: "{{ item.name }}"
          owner: "{{ item.name }}"
        become: true          
        become_user: postgres
        with_items: "{{ postgresql_schemas }}"
      #------ 
      #This is enough for the users 'user0' and 'user1' to have complete control of the db1 and db2 databases respectively
      - name: Set the user privileges
        community.postgresql.postgresql_privs:
          database: "{{ item.db }}"
          state: present
          objs: "{{ item.objs | default(omit) }}"
          privs: "{{ item.privs }}"
          type: "{{ item.type | default(omit) }}"
          roles: "{{ item.roles | default(omit) }}"
        become: true          
        become_user: postgres
        with_items: "{{ postgresql_privs | default([]) }}"      
      #------
      - name: Add entries to pg_hba
        community.postgresql.postgresql_pg_hba:
          dest: "/var/lib/pgsql/13/data/pg_hba.conf"
          address: "{{ item.address | default(omit) }}"
          contype: "{{ item.contype }}"
          databases: "{{ item.databases }}"
          method: "{{ item.method }}"
          users: "{{ item.users }}"
        become: true          
        become_user: postgres
        with_items: "{{ postgresql_hba_entries }}"
        notify:
          - pg restart

      #------ 
      rescue:  #recue for config and start
      - name: Abort execution in case of failure
        when: { ansible_failed_result.failed }
        ansible.builtin.fail:
          msg: "{{ ansible_failed_result }}"             