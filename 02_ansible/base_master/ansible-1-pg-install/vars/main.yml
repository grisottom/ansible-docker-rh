---

allow_world_readable_tmpfiles: true

# create a variable named "proxy_env" that is a dictionary
proxy_env:
  http_proxy: "{{lookup('ansible.builtin.env','HTTP_PROXY')}}"
  https_proxy: "{{lookup('ansible.builtin.env','HTTPS_PROXY')}}"
  no_proxy: "{{lookup('ansible.builtin.env','NO_PROXY')}}"

db1_user: "{{ lookup('hashi_vault', 'secret=MyCompany/MyContext/postgres/product/db1:user') }}"
db1_password: "{{ lookup('hashi_vault', 'secret=MyCompany/MyContext/postgres/product/db1:password') }}"

db2_user: "{{ lookup('hashi_vault', 'secret=MyCompany/MyContext/postgres/product/db2:user') }}"
db2_password: "{{ lookup('hashi_vault', 'secret=MyCompany/MyContext/postgres/product/db2:password') }}"

postgresql_options:
  - { name: listen_addresses,  value: "*" }
  - { name: logging_collector, value: "off" }

postgresql_databases: [db1, db2]

postgresql_users:
  - { db: db1, name: "{{ db1_user }}", password: "{{ db1_password }}" }
  - { db: db2, name: "{{ db2_user }}", password: "{{ db2_password }}" }

postgresql_schemas:
  - { db: db1, name: "{{ db1_user }}", owner: "{{ db1_user }}" }
  - { db: db2, name: "{{ db2_user }}", owner: "{{ db2_user }}" }

postgresql_privs:
  - { db: db1, roles: "{{ db1_user }}", privs: ALL, type: database }
  - { db: db2, roles: "{{ db2_user }}", privs: ALL, type: database }

postgresql_hba_entries:
  - { contype: local, databases: all, users: all,                      method: peer          }
  - { contype: host,  databases: db1, users: "{{ db1_user }}",  address: samenet, method: scram-sha-256 }
  - { contype: host,  databases: db2, users: "{{ db2_user }}",  address: samenet, method: scram-sha-256 }